import config as os
from config import *
import telebot
import time
import random
import threading
from telebot import types
from pymongo import MongoClient
import traceback

# –ù–ï –°–ü–£–°–ö–ê–ô–¢–ï–°–¨ –ù–ò–ñ–ï –¢–£–¢ –î–£–®–ò –ú–ï–†–¢–í–´–• –î–ï–í–°–¢–í–ï–ù–ù–ò–¶


token = os.environ['TELEGRAM_TOKEN']
bot = telebot.TeleBot(token)

client = MongoClient(os.environ['database'])
db = client.lifesim
users = db.users
locs = db.locs
kvs = db.kvs

users.update_many({}, {'$set': {'human.walking': False}})


# kvs.update_many({},{'$set':{'locked':True}})
# for ids in kvs.find({}):
#    bot.send_message(ids['id'], text)
# users.update_many({},{'$set':{'human.take_away':False, 'human.mix':[]}})

# –ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–ê
def currentshop(human):
    shop = None
    for building in streets[human['position']['street']]['buildings']:
        if streets[human['position']['street']]['buildings'][building]['code'] == human['position']['building']:
            shop = streets[human['position']['street']]['buildings'][building]
    return shop


def init_product(food, cost=0, give_desc=False):
    name = '–ù–µ –æ–ø–æ–∑–Ω–∞–Ω–æ'
    value = 0
    food_desc = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    code = food
    weight = 1
    if food == 'bread':
        name = '–•–ª–µ–±'
        value = 1
        food_desc = '–û–±—ã—á–Ω—ã–π —Ö–ª–µ–±. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 1üçó.'
        weight = 2

    elif food == 'sousage':
        name = '–°–æ—Å–∏—Å–∫–∏'
        value = 4
        food_desc = '–°–æ—Å–∏—Å–∫–∏ –∏–∑ —Å–≤–∏–Ω–∏–Ω—ã. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç 4üçó.'
        weight = 6

    elif food == 'conserves':
        name = '–†—ã–±–Ω—ã–µ –∫–æ–Ω—Å–µ—Ä–≤—ã'
        value = 3
        food_desc = '–î–µ—à—ë–≤—ã–µ –∫–æ–Ω—Å–µ—Ä–≤—ã. –î–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –æ—á–µ–Ω—å –±–æ–≥–∞—Ç. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç 3üçó.'
        weight = 5

    obj = {
        'cost': cost,
        'value': value,
        'name': name,
        'code': code,
        'weight': weight
    }
    if give_desc:
        return food_desc
    return obj


streets = {
    'bitard_street': {
        'name': '–ë–∏—Ç–∞—Ä–¥-—Å—Ç—Ä–∏—Ç',
        'nearlocs': ['meet_street', 'shop_street'],
        'code': 'bitard_street',
        'homes': ['17', '18', '30'],                                     # –£–•–û–î–ò
        'buildings': {},
        'humans': []
    },

    'new_street': {
        'name': '–ù–æ–≤–∞—è',
        'nearlocs': ['meet_street', 'shop_street'],
        'code': 'new_street',
        'homes': ['101', '228'],
        'buildings': {},
        'humans': []
    },

    'shop_street': {
        'name': '–¢–æ—Ä–≥–æ–≤–∞—è',
        'nearlocs': ['bitard_street', 'new_street'],
        'code': 'shop_street',
        'homes': ['290', '311', '81'],
        'buildings': {
            'sitniy': {
                'name': '–°—ã—Ç–Ω—ã–π',
                'type': 'shop',
                'street': 'shop_street',
                'humans': [],
                'code': 'sitniy',
                'products': {
                    'bread': init_product('bread', 50),
                    'sousage': init_product('sousage', 300),
                    'conserves': init_product('conserves', 150)
                }
            }
        },
        'humans': []
    },

    'meet_street': {
        'name': '–í—Å—Ç—Ä–µ—á–Ω–∞—è',
        'nearlocs': ['new_street', 'bitard_street'],
        'code': 'meet_street',
        'homes': [],
        'buildings': {},
        'humans': []
    }

}

# locs.remove({'code':'shop_street'})

for street in streets:
    street = streets[street]
    if not locs.find_one({'code': street['code']}):
        locs.insert_one(street)

for street in locs.find({}):
    for building in street['buildings']:
        building = street['buildings'][building]
        if building['type'] == 'shop':
            for product in streets[street['code']]['buildings'][building['code']]['products']:
                product = streets[street['code']]['buildings'][building['code']]['products'][product]
                if product['code'] not in building['products']:
                    locs.update_one({'code': street['code']},
                                    {'$set': {f'buildings.{building["code"]}.products.{product["code"]}': product}})


def reply_kb(user):
    kb = types.ReplyKeyboardMarkup()
    emoji = 'üö∂'
    if user['human']['gender'] == 'female':
        emoji = 'üö∂‚Äç‚ôÄÔ∏è'
    kb.add(types.KeyboardButton(emoji + '–ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ'))
    h = user['human']
    if h['position']['flat']:
        kb.add(types.KeyboardButton('üóÑ' + '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫'), types.KeyboardButton('üçó' + '–ï–¥–∞'))
        kb.add(types.KeyboardButton('üì±' + '–ò—Å–∫–∞—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É'), types.KeyboardButton('üõè' + '–°–æ–Ω'))
        kb.add(types.KeyboardButton('üîê–ó–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É'))
    kb.add(types.KeyboardButton('üë§–ü—Ä–æ—Ñ–∏–ª—å'))
    return kb


@bot.message_handler(commands=['clear_all'])
def clearall(m):
    if m.from_user.id == 441399484:
        users.remove({})
        kvs.remove({})
        bot.send_message(m.chat.id, '–û—á–∏—Å—Ç–∏–ª —é–∑–µ—Ä–æ–≤ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã.')


@bot.message_handler(func=lambda m: m.text == 'üì±–ò—Å–∫–∞—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É')
def works(m):
    pass


@bot.message_handler(func=lambda m: m.text == 'üõè–°–æ–Ω')
def sleeeep(m):
    pass


@bot.message_handler(func=lambda m: m.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å')
def profile(m):
    user = users.find_one({'id': m.from_user.id})
    if user == None:
        return
    if user['start_stats'] == True:
        return
    h = user['human']
    text = '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n'
    text += '–ò–º—è: ' + h['name'] + '\n'
    text += '–í–æ–∑—Ä–∞—Å—Ç: ' + str(h['age']) + '\n'
    text += '–î–µ–Ω—å–≥–∏: ' + str(h['money']) + 'üí∂\n'
    text += '–°—ã—Ç–æ—Å—Ç—å: ' + str(h['hunger']) + '/' + str(h['maxhunger']) + 'üçó\n'
    text += '–ó–¥–æ—Ä–æ–≤—å–µ: ' + str(h['health']) + '/' + str(h['maxhealth']) + '‚ù§\n'
    text += '–°–∏–ª—ã: ' + str(h['power']) + '/' + str(h['maxpower']) + '‚ö°\n'
    text += '–ë–æ–¥—Ä–æ—Å—Ç—å: ' + str(h['sleep']) + '/' + str(h['maxsleep']) + 'üõå\n'
    bot.send_message(m.chat.id, text)


@bot.message_handler(func=lambda m: m.text == '/start' and users.find_one({'id': m.from_user.id}) != None)
def starts(m):
    user = users.find_one({'id': m.from_user.id})
    if user['start_stats'] == True:
        return
    kb = reply_kb(user)
    bot.send_message(m.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=kb)


@bot.message_handler(commands=['navigator'])
def navv(m):
    bot.send_message(m.chat.id, 'üì¥–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!')


@bot.message_handler(commands=['help'])
def navv(m):
    bot.send_message(m.chat.id, 'üì¥–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!')


@bot.message_handler(commands=['phone'])
def look(m):
    user = getuser(m.from_user)
    if not m.reply_to_message:
        return
    if not m.reply_to_message.text.count(':'):
        return
    human_name = m.reply_to_message.text.split(':')[0]
    if user['human']['name'] == human_name:
        bot.reply_to(m, '–ù–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!')
        return
    friend = users.find_one({'human.name': human_name})
    if not friend:
        bot.reply_to(m, '–¢–∞–∫–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ—Ç!')
        return
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text='üîë–î–∞—Ç—å –∫–ª—é—á–∏ –æ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã',
                                      callback_data='phone?give_keys?' + str(friend["id"])))
    kb.add(types.InlineKeyboardButton(text='üö∑–í—ã–≥–Ω–∞—Ç—å –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
                                      callback_data=f'phone?throw_away?' + str(friend["id"])))
    bot.send_message(m.from_user.id, 'üì±–í—ã –¥–æ—Å—Ç–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω. –ß—Ç–æ –≤—ã —Ö–æ–¥–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å ' + human_name + '?',
                     reply_markup=kb)


@bot.message_handler(func=lambda message: message.text != None and message.text[0] in ['üóÑ', 'üîê', 'üçó'])
def doings_locks(m):
    user = getuser(m.from_user)
    h = user['human']
    if m.text == 'üóÑ–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫':
        kb = get_fridge(user)
        if kb == None:
            bot.send_message(m.chat.id, '–í—ã –Ω–µ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ!')
            return
        bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å/–≤–∑—è—Ç—å.', reply_markup=kb)

    elif m.text == 'üîê–ó–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É':
        kv = kvs.find_one({'id': h['position']['flat']})
        if kv == None:
            bot.send_message(m.chat.id, '–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ!')
            return
        key = kv['street'] + '#' + kv['home'] + '#' + str(kv['id'])
        if key not in h['keys']:
            bot.send_message(m.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π –æ—Ç —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã!')
            return
        if kv['locked']:
            kvs.update_one({'id': kv['id']}, {'$set': {'locked': False}})
            bot.send_message(m.chat.id, '–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É!')
        else:
            kvs.update_one({'id': kv['id']}, {'$set': {'locked': True}})
            bot.send_message(m.chat.id,
                             '–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ –∫–ª—é—á! –¢–µ–ø–µ—Ä—å –∑–∞–π—Ç–∏ –≤ –Ω–µ—ë —Å–º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ–≥–æ –µ—Å—Ç—å –∫–ª—é—á.')

    elif m.text == 'üçó–ï–¥–∞':
        if not in_cafe(user):
            bot.send_message(m.chat.id, '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –±—ã—Ç—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ –∏–ª–∏ –∫–∞—Ñ–µ!')
            return

        kb = get_eating(user)
        bot.send_message(m.chat.id, '–í—ã —Å–∞–¥–∏—Ç–µ—Å—å –∑–∞ —Å—Ç–æ–ª. –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ—à–∞—Ç—å, —á—Ç–æ–±—ã —Å—ä–µ—Å—Ç—å.',
                         reply_markup=kb)


def in_cafe(user):
    h = user['human']
    kv = kvs.find_one({'id': h['position']['flat']})
    cafe = None
    for ids in streets:
        street = streets[ids]
        for idss in street['buildings']:
            b = street['buildings'][idss]
            if b['code'] == h['position']['building']:
                cafe = b

    if kv is None and cafe is None:
        return False

    if cafe is not None and cafe['type'] != 'cafe':
        return False

    return True


@bot.callback_query_handler(func=lambda c: c.data.split('?')[0] == 'phone')
def phone_acts(c):
    kb = types.InlineKeyboardMarkup()
    user = users.find_one({'id': c.from_user.id})
    h = user['human']
    action = c.data.split('?')[1]
    friend = users.find_one({'id': int(c.data.split('?')[2])})
    print(friend)
    print(user)
    if action == 'give_keys':
        for key in h['keys']:
            kb.add(types.InlineKeyboardButton(text=str(key),
                                              callback_data='phone?give_key?' + str(friend["id"]) + '?' + str(key)))
        medit(message_text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å.', chat_id=c.from_user.id,
              message_id=c.message.message_id, reply_markup=kb)
    if action == 'give_key':
        key = c.data.split('?')[3]
        friend['human']['keys'].append(key)
        users.update_one({'id': friend['id']}, {'$set': friend})
        medit(message_text='–ö–ª—é—á ' + str(key) + ' –ø–µ—Ä–µ–¥–∞–Ω.', chat_id=c.from_user.id, message_id=c.message.message_id)
        bot.send_message(friend['id'], '–í–∞–º –¥–∞–ª–∏ ' + str(key) + '!')
    if action == 'ungive_key':
        key = c.data.split('?')[3]
        friend['human']['keys'].remove(key)
        users.update_one({'id': friend['id']}, {'$set': friend})
        medit(message_text='–ö–ª—é—á ' + str(key) + ' –æ—Ç–æ–±—Ä–∞–Ω.', chat_id=c.from_user.id, message_id=c.message.message_id)
        bot.send_message(friend['id'], '–£ –≤–∞—Å –æ—Ç–æ–±—Ä–∞–ª–∏ –∫–ª—é—á ' + str(key) + '!')
    if action == 'throw_away':
        if not h['position']['flat']:
            medit(message_text='–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≥–æ–Ω—è—Ç—å –∏ –∑–∞–±–∏—Ä–∞—Ç—å –∫–ª—é—á–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã!',
                  chat_id=c.from_user.id, message_id=c.message.message_id)
            return
        if friend['human']['position']['flat'] != h['position']['flat']:
            for key in h['keys']:
                if key in friend['human']['keys']:
                    kb.add(types.InlineKeyboardButton(text=str(key),
                                                      callback_data='phone?ungive_key?' + str(friend["id"]) + '?' + str(
                                                          key)))
            medit(message_text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–±—Ä–∞—Ç—å.', chat_id=c.from_user.id,
                  message_id=c.message.message_id, reply_markup=kb)
        else:
            kvs.update_one({'id': friend['human']['position']['flat']}, {'$pull': {'humans': friend['id']}})
            friend['human']['position']['flat'] = None
            users.update_one({'id': friend['id']}, {'$set': friend})
            medit(message_text='–í—ã –≤—ã–≥–Ω–∞–ª–∏ ' + str(friend["human"]["name"]) + ' –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã!', chat_id=c.from_user.id,
                  message_id=c.message.message_id)
            bot.send_message(friend['id'], '–í–∞—Å –≤—ã–≥–Ω–∞–ª–∏ –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–∞ —É–ª–∏—Ü–µ!')


@bot.callback_query_handler(func=lambda call: call.data.split('?')[0] == 'cafe')
def cafeacts(call):
    user = users.find_one({'id': call.from_user.id})
    h = user['human']
    if not in_cafe(user):
        bot.answer_callback_query(call.id, '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –±—ã—Ç—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ –∏–ª–∏ –∫–∞—Ñ–µ!', show_alert=True)
        return

    what = call.data.split('?')[1]
    if what == 'mix':
        item = call.data.split('?')[2]
        if item not in h['inv']:
            bot.answer_callback_query(call.id, '–£ –≤–∞—Å —ç—Ç–æ–≥–æ –Ω–µ—Ç!')
            return

        inv = h['inv']
        inv.remove(item)
        users.update_one({'id': user['id']}, {'$push': {'human.mix': item}})
        users.update_one({'id': user['id']}, {'$set': {'human.inv': inv}})
        bot.answer_callback_query(call.id, '–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è!', show_alert=True)

    elif what == 'take_away':
        item = call.data.split('?')[2]
        if item not in h['mix']:
            bot.answer_callback_query(call.id, '–≠—Ç–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è!', show_alert=True)
            return

        mix = h['mix']
        mix.remove(item)
        users.update_one({'id': user['id']}, {'$set': {'human.mix': mix}})
        users.update_one({'id': user['id']}, {'$push': {'human.inv': item}})
        bot.answer_callback_query(call.id, '–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è!', show_alert=True)

    elif what == 'set_take_away':
        users.update_one({'id': user['id']}, {'$set': {'human.take_away': True}})

    elif what == 'unset_take_away':
        users.update_one({'id': user['id']}, {'$set': {'human.take_away': False}})

    elif what == 'ready':
        hunger = 0
        if len(h['mix']) == 0:
            bot.answer_callback_query(call.id, '–ù–∞ —Å—Ç–æ–ª–µ –ø—É—Å—Ç–æ! –ù–µ–ª—å–∑—è –ø–∏—Ç–∞—Ç—å—Å—è —Ç–∞—Ä–µ–ª–∫–æ–π!', show_alert=True)
            return
        for ids in h['mix']:
            p = init_product(ids)
            hunger += p['value']
        if 'sousage' in h['mix'] and 'bread' in h['mix']:
            hunger += 2
        if 'sousage' in h['mix'] and 'conserves' in h['mix']:
            hunger -= 3
        if 'bread' in h['mix'] and 'conserves' in h['mix']:
            hunger += 1

        users.update_one({'id': user['id']}, {'$inc': {'human.hunger': hunger}})
        users.update_one({'id': user['id']}, {'$set': {'human.mix': []}})
        user = users.find_one({'id': user['id']})
        h = user['human']
        if h['hunger'] > h['maxhunger']:
            users.update_one({'id': user['id']}, {'$set': {'human.hunger': h['maxhunger']}})
        medit('–í—ã —Å–º–µ—à–∞–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∏ —Å—ä–µ–ª–∏ –ø–æ–ª—É—á–∏–≤—à–µ–µ—Å—è –±–ª—é–¥–æ. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ' + str(hunger) + 'üçó.',
              call.message.chat.id, call.message.message_id)
        return

    kb = get_eating(user)
    try:
        medit('–í—ã —Å–∞–¥–∏—Ç–µ—Å—å –∑–∞ —Å—Ç–æ–ª. –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ—à–∞—Ç—å, —á—Ç–æ–±—ã —Å—ä–µ—Å—Ç—å.', call.message.chat.id,
              call.message.message_id, reply_markup=kb)
    except:
        pass


def get_eating(user):
    user = users.find_one({'id': user['id']})
    h = user['human']
    kb = types.InlineKeyboardMarkup()
    mix = ''
    take_away = ''
    if h['take_away'] == False:
        mix = '‚úÖ'
        take_away = '‚òë'
        for ids in h['inv']:
            kb.add(types.InlineKeyboardButton(text=init_product(ids)['name'], callback_data='cafe?mix?' + ids))
    elif h['take_away'] == True:
        mix = '‚òë'
        take_away = '‚úÖ'
        for ids in h['mix']:
            x = gettype(ids)
            if x == 'product':
                kb.add(types.InlineKeyboardButton(text=init_product(ids)['name'], callback_data='cafe?take_away?' + ids))
    kb.add(types.InlineKeyboardButton(text=mix + '–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', callback_data='cafe?unset_take_away'),
           types.InlineKeyboardButton(text=take_away + '–£–±—Ä–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', callback_data='cafe?set_take_away'))
    kb.add(types.InlineKeyboardButton(text='ü•£' + '–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏ —Å—ä–µ—Å—Ç—å', callback_data='cafe?ready'))

    return kb


def get_fridge(user):
    user = users.find_one({'id': user['id']})
    h = user['human']
    kb = types.InlineKeyboardMarkup()
    br = ''
    kl = ''
    if h['br'] == True:
        br = '‚úÖ'
        kl = '‚òë'
        kv = kvs.find_one({'id': int(h['position']['flat'])})
        if kv == None:
            return None
        for ids in kv['objects']['fridge']['inv']:
            kb.add(types.InlineKeyboardButton(text=init_product(ids)['name'], callback_data='fridge?take?' + ids))
    elif h['kl'] == True:
        br = '‚òë'
        kl = '‚úÖ'
        for ids in h['inv']:
            x = gettype(ids)
            if x == 'product':
                kb.add(types.InlineKeyboardButton(text=init_product(ids)['name'], callback_data='fridge?put?' + ids))
    kb.add(types.InlineKeyboardButton(text=br + '–ë—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã', callback_data='fridge?set_br'),
           types.InlineKeyboardButton(text=kl + '–ö–ª–∞—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã', callback_data='fridge?set_kl'))
    return kb


@bot.callback_query_handler(func=lambda call: call.data.split('?')[0] == 'fridge')
def fridgeacts(call):
    user = users.find_one({'id': call.from_user.id})
    if user == None:
        return
    h = user['human']
    kv = kvs.find_one({'id': h['position']['flat']})
    if kv == None:
        medit('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ!', call.message.chat.id, call.message.message_id)
        return
    kb = get_fridge(user)
    if not kb:
        medit('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ!', call.message.chat.id, call.message.message_id)
        return
    act = call.data.split('?')[1]
    if act == 'set_br':
        users.update_one({'id': user['id']}, {'$set': {'human.br': True, 'human.kl': False}})
        bot.answer_callback_query(call.id, '–í—ã–±—Ä–∞–Ω–æ - –±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã!', show_alert=True)
        kb = get_fridge(user)
        medit('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å/–≤–∑—è—Ç—å.', call.message.chat.id, call.message.message_id,
              reply_markup=kb)

    elif act == 'set_kl':
        users.update_one({'id': user['id']}, {'$set': {'human.br': False, 'human.kl': True}})
        bot.answer_callback_query(call.id, '–í—ã–±—Ä–∞–Ω–æ - –∫–ª–∞—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã!', show_alert=True)
        kb = get_fridge(user)
        medit('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å/–≤–∑—è—Ç—å.', call.message.chat.id, call.message.message_id,
              reply_markup=kb)

    elif act == 'put':
        what = call.data.split('?')[2]
        if what not in h['inv']:
            bot.answer_callback_query(call.id, '–£ –≤–∞—Å —ç—Ç–æ–≥–æ –Ω–µ—Ç!', show_alert=True)
            return
        kv = kvs.find_one({'id': h['position']['flat']})
        weight = init_product(what)['weight']
        alred = 0
        for ids in kv['objects']['fridge']['inv']:
            alred += init_product(ids)['weight']
        if kv['objects']['fridge']['maxweight'] - alred < weight:
            bot.answer_callback_query(call.id, '–í —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞!', show_alert=True)
            return
        inv = h['inv']
        inv.remove(what)
        kvs.update_one({'id': kv['id']}, {'$push': {'objects.fridge.inv': what}})
        users.update_one({'id': user['id']}, {'$set': {'human.inv': inv}})
        bot.answer_callback_query(call.id, '–í—ã –ø–æ–ª–æ–∂–∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫!', show_alert=True)
        user = users.find_one({'id': user['id']})
        kb = get_fridge(user)
        medit('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å/–≤–∑—è—Ç—å.', call.message.chat.id, call.message.message_id,
              reply_markup=kb)

    elif act == 'take':
        kv = kvs.find_one({'id': h['position']['flat']})
        what = call.data.split('?')[2]
        if what not in kv['objects']['fridge']['inv']:
            bot.answer_callback_query(call.id, '–í —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ —ç—Ç–æ–≥–æ –Ω–µ—Ç!', show_alert=True)
            return
        weight = init_product(what)['weight']
        alred = 0
        for ids in h['inv']:
            alred += init_product(ids)['weight']
        if h['inv_maxweight'] - alred < weight:
            bot.answer_callback_query(call.id, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–æ–ª—å–∫–æ –Ω–µ—Å—Ç–∏!', show_alert=True)
            return
        inv = kv['objects']['fridge']['inv']
        inv.remove(what)
        kvs.update_one({'id': kv['id']}, {'$set': {'objects.fridge.inv': inv}})
        users.update_one({'id': user['id']}, {'$push': {'human.inv': what}})
        bot.answer_callback_query(call.id, '–í—ã –≤–∑—è–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞!', show_alert=True)
        user = users.find_one({'id': user['id']})
        kb = get_fridge(user)
        medit('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å/–≤–∑—è—Ç—å.', call.message.chat.id, call.message.message_id,
              reply_markup=kb)


def gettype(x):
    typee = '?'
    a = init_product(x)
    if a['name'] == '–ù–µ –æ–ø–æ–∑–Ω–∞–Ω–æ':
        pass
    else:
        typee = 'product'
    return typee


@bot.message_handler(func=lambda message: message.text != None and message.text[0] in emjs)
def doings(m):
    if m.from_user.id != m.chat.id:
        return
    user = getuser(m.from_user)
    if user['start_stats'] == True:
        return
    if user['human']['walking']:
        bot.send_message(m.chat.id, '–í—ã —Å–µ–π—á–∞—Å –≤ –ø—É—Ç–∏!')
        return

    if m.text == 'üö∂–ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ' or m.text == 'üö∂‚Äç‚ôÄÔ∏è–ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ':
        avalaible_locs = []
        h = user['human']
        street = streets[h['position']['street']]
        if h['position']['flat'] == None and h['position']['building'] == None:
            for ids in street['nearlocs']:
                avalaible_locs.append('street?' + ids)

            for ids in street['buildings']:
                avalaible_locs.append('building?' + street['buildings'][ids]['code'])

            for ids in h['keys']:
                kv = kvs.find_one({'id': int(ids.split('#')[2])})
                if kv['home'] in street['homes'] and kv['street'] == street['code']:
                    avalaible_locs.append('home?' + str(kv['id']))




        else:
            avalaible_locs.append('street?' + street['code'])

        if h['gender'] == 'male':
            em = 'üö∂'
        elif h['gender'] == 'female':
            em = 'üö∂‚Äç‚ôÄÔ∏è'
        kb = types.ReplyKeyboardMarkup()

        for ids in avalaible_locs:
            print(ids)
            kb.add(types.KeyboardButton(em + to_text(ids, 'place')))

        bot.send_message(m.chat.id, '–ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏?', reply_markup=kb)

    else:
        try:
            emjloc = 0
            if user['human']['gender'] == 'female':
                emjloc = 1
            what = m.text.split(emjs[emjloc])[1].split(' ')[0]
            which = m.text.split(what + ' ')[1]
        except:
            bot.send_message(m.chat.id, '–¢–∞–∫–æ–≥–æ –º–µ—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç!')
            return

        if what == '–£–ª–∏—Ü–∞':
            newstr = None
            for ids in streets:
                if streets[ids]['name'] == which:
                    newstr = streets[ids]

            if newstr == None:
                bot.send_message(m.chat.id, '–ß–µ–≥–æ-—Ç–æ –≤—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç–µ... –£–ª–∏—Ü—ã ' + which + ' –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç!')
                return

            h = user['human']
            curstr = h['position']['street']
            if newstr['code'] not in streets[curstr]['nearlocs'] and h['position']['flat'] == None and h['position'][
                'building'] == None:
                bot.send_message(m.chat.id, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —ç—Ç—É —É–ª–∏—Ü—É –æ—Ç—Å—é–¥–∞!')
                return
            if h['position']['flat'] != None:
                kv = kvs.find_one({'id': h['position']['flat']})
                if kv['street'] != newstr['code']:
                    bot.send_message(m.chat.id, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —ç—Ç—É —É–ª–∏—Ü—É –æ—Ç—Å—é–¥–∞!')
                    return
            users.update_one({'id': user['id']}, {'$set': {'human.walking': True}})
            if h['position']['flat'] != None:
                threading.Timer(random.randint(50, 70), endwalk, args=[user, newstr, 'flat']).start()
                bot.send_message(m.chat.id, '–í—ã –≤—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã. –û–∫–∞–∂–µ—Ç–µ—Å—å –Ω–∞ —É–ª–∏—Ü–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.')
            elif h['position']['building'] != None:
                threading.Timer(random.randint(50, 70), endwalk, args=[user, newstr, 'building']).start()
                bot.send_message(m.chat.id, '–í—ã –≤—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ –∑–¥–∞–Ω–∏—è. –û–∫–∞–∂–µ—Ç–µ—Å—å –Ω–∞ —É–ª–∏—Ü–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.')
            else:
                threading.Timer(random.randint(50, 70), endwalk, args=[user, newstr]).start()
                bot.send_message(m.chat.id, '–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ —Å—Ç–æ—Ä–æ–Ω—É —É–ª–∏—Ü—ã ' + newstr[
                    'name'] + '. –î–æ–π–¥—ë—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.')

        elif what == '–ö–≤–∞—Ä—Ç–∏—Ä–∞':
            try:
                kv = kvs.find_one({'id': int(which)})
                if kv == None:
                    raise
            except:
                bot.send_message(m.chat.id, '–û—Ç —Ç–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –∫–ª—é—á–µ–π —É –≤–∞—Å –Ω–µ—Ç!')
                return

            h = user['human']
            curkv = h['position']['flat']
            curb = h['position']['building']
            if curkv != None or curb != None:
                bot.send_message(m.chat.id, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –≤ —ç—Ç—É –∫–≤–∞—Ä—Ç–∏—Ä—É –æ—Ç—Å—é–¥–∞!')
                return

            if kv['street'] != h['position']['street']:
                bot.send_message(m.chat.id, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –≤ —ç—Ç—É –∫–≤–∞—Ä—Ç–∏—Ä—É –æ—Ç—Å—é–¥–∞!')
                return

            users.update_one({'id': user['id']}, {'$set': {'human.walking': True}})
            threading.Timer(random.randint(50, 70), endwalk_flat, args=[user, kv]).start()
            bot.send_message(m.chat.id,
                             '–í—ã –Ω–∞—á–∞–ª–∏ –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É ' + str(which) + '. –î–æ–π–¥—ë—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.')

        elif what == '–ú–∞–≥–∞–∑–∏–Ω':
            h = user['human']
            curkv = h['position']['flat']
            curb = h['position']['building']
            curs = streets[h['position']['street']]
            shop = None
            for ids in curs['buildings']:
                if curs['buildings'][ids]['name'] == which:
                    shop = curs['buildings'][ids]
            if shop == None:
                bot.send_message(m.chat.id, '–¢–∞–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ —ç—Ç–æ–π —É–ª–∏—Ü–µ –Ω–µ—Ç!')
                return

            if curkv != None or curb != None:
                bot.send_message(m.chat.id, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –≤ —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω –æ—Ç—Å—é–¥–∞!')
                return

            users.update_one({'id': user['id']}, {'$set': {'human.walking': True}})
            threading.Timer(random.randint(50, 70), endwalk_build, args=[user, shop]).start()
            bot.send_message(m.chat.id, '–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω ' + str(which) + '. –î–æ–π–¥—ë—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.')


def endwalk_flat(user, kv):
    try:
        user = users.find_one({'id': user['id']})
        h = user['human']
        users.update_one({'id': user['id']}, {'$set': {'human.walking': False}})
        if len(user['human']['shop_inv']) > 0:
            bot.send_message(user['id'],
                             '–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –≤—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, –Ω–æ –≤–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –æ—Ö—Ä–∞–Ω–Ω–∏–∫. –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∫—É–ø–∫–∏!')
            return
        h = user['human']
        kv = kvs.find_one({'id': kv['id']})
        if kv['street'] + '#' + kv['home'] + '#' + str(kv['id']) not in h['keys'] and kv['locked']:
            bot.send_message(user['id'],
                             '–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–π—Ç–∏ –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É ' + str(kv['id']) + ', –Ω–æ –æ–Ω–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ –∫–ª—é—á!')
            return
        curstr = locs.find_one({'code': h['position']['street']})
        for ids in curstr['humans']:
            if ids != user['id']:
                print(ids)
                user2 = users.find_one({'id': ids})
                h2 = user2['human']
                if h2['position']['flat'] == None and h2['position']['building'] == None:
                    bot.send_message(ids, h['name'] + ' –ø–æ–∫–∏–¥–∞–µ—Ç —É–ª–∏—Ü—É!')
        kvs.update_one({'id': kv['id']}, {'$push': {'humans': user['id']}})
        users.update_one({'id': user['id']}, {'$set': {'human.position.building': None}})
        users.update_one({'id': user['id']}, {'$set': {'human.position.flat': kv['id']}})
        user = users.find_one({'id': user['id']})
        kb = reply_kb(user)
        bot.send_message(user['id'], '–í—ã –∑–∞—à–ª–∏ –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É ' + str(kv['id']) + '!', reply_markup=kb)
        kv = kvs.find_one({'id': kv['id']})
        for ids in kv['humans']:
            if int(ids) != user['id']:
                bot.send_message(ids, '–í –∫–≤–∞—Ä—Ç–∏—Ä—É –∑–∞—Ö–æ–¥–∏—Ç ' + desc(user))

        text = '–í –∫–≤–∞—Ä—Ç–∏—Ä–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏—Ö –ª—é–¥–µ–π:\n\n'
        for ids in kv['humans']:
            if ids != user['id']:
                text += desc(users.find_one({'id': ids}), True) + '\n\n'

        if text != '–í –∫–≤–∞—Ä—Ç–∏—Ä–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏—Ö –ª—é–¥–µ–π:\n\n':
            bot.send_message(user['id'], text)

    except:
        bot.send_message(441399484, traceback.format_exc())


def endwalk_build(user, build):
    try:
        user = users.find_one({'id': user['id']})
        h = user['human']
        users.update_one({'id': user['id']}, {'$set': {'human.walking': False}})
        if len(user['human']['shop_inv']) > 0:
            bot.send_message(user['id'],
                             '–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –≤—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, –Ω–æ –≤–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –æ—Ö—Ä–∞–Ω–Ω–∏–∫. –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∫—É–ø–∫–∏!')
            return

        curstr = locs.find_one({'code': h['position']['street']})
        for ids in curstr['humans']:
            if ids != user['id']:
                user2 = users.find_one({'id': ids})
                h2 = user2['human']
                if h2['position']['flat'] == None and h2['position']['building'] == None:
                    bot.send_message(ids, h['name'] + ' –ø–æ–∫–∏–¥–∞–µ—Ç —É–ª–∏—Ü—É!')
        locs.update_one({'code': build['street']}, {'$push': {'buildings.' + build['code'] + '.humans': user['id']}})
        users.update_one({'id': user['id']}, {'$set': {'human.position.flat': None}})
        users.update_one({'id': user['id']}, {'$set': {'human.position.building': build['code']}})
        user = users.find_one({'id': user['id']})
        kb = reply_kb(user)

        if build['type'] == 'shop':
            bot.send_message(user['id'], '–í—ã –∑–∞—à–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω ' + build['name'] + '!', reply_markup=kb)
            kb = getshop(build, user)
            bot.send_message(user['id'], '–ù–∞ –ø–æ–ª–∫–∞—Ö –º–∞–≥–∞–∑–∏–Ω–∞ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç:', reply_markup=kb)
        build = locs.find_one({'code': build['street']})['buildings'][build['code']]
        for ids in build['humans']:
            if int(ids) != user['id']:
                if build['type'] == 'shop':
                    bot.send_message(ids, '–í –º–∞–≥–∞–∑–∏–Ω –∑–∞—Ö–æ–¥–∏—Ç ' + desc(user))

        if build['type'] == 'shop':
            text = '–í –º–∞–≥–∞–∑–∏–Ω–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏—Ö –ª—é–¥–µ–π:\n\n'

        for ids in build['humans']:
            if ids != user['id']:
                text += desc(users.find_one({'id': ids}), True) + '\n\n'

        if build['type'] == 'shop':
            if text != '–í –º–∞–≥–∞–∑–∏–Ω–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏—Ö –ª—é–¥–µ–π:\n\n':
                bot.send_message(user['id'], text)
    except:
        bot.send_message(441399484, traceback.format_exc())


def getshop(shop, user=None):
    kb = types.InlineKeyboardMarkup()
    for ids in shop['products']:
        pr = shop['products'][ids]
        kb.add(types.InlineKeyboardButton(text=pr['name'], callback_data='show?' + pr['code']))
    kb.add(types.InlineKeyboardButton(text='üõí–í–∞—à–∞ —Ç–µ–ª–µ–≥–∞', callback_data='shop?my_buys'))
    cost = 0
    if user != None:
        for ids in user['human']['shop_inv']:
            cost += shop['products'][ids]['cost']
    if user != None:
        kb.add(
            types.InlineKeyboardButton(text='‚úÖ–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ (' + str(cost) + 'üí∂)', callback_data='shop?buy_ready'))
    else:
        kb.add(types.InlineKeyboardButton(text='‚úÖ–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data='shop?buy_ready'))
    return kb


def getweight(x, obj='product'):
    if obj == 'product':
        return init_product(x, 0)['weight']


def desc(user, high=False):
    text = ''
    h = user['human']
    telosl = 0
    if h['gender'] == 'male':
        if not high:
            text += '–ø–∞—Ä–µ–Ω—å '
        else:
            text += '–ü–∞—Ä–µ–Ω—å '
    elif h['gender'] == 'female':
        if not high:
            text += '–¥–µ–≤—É—à–∫–∞ '
        else:
            text += '–î–µ–≤—É—à–∫–∞ '
    if h['strenght'] <= 5:
        telosl -= 1
    elif h['strenght'] <= 10:
        telosl -= 3
    elif h['strenght'] <= 20:
        telosl -= 6

    if h['maxhunger'] <= 60:
        telosl -= 4
    elif h['maxhunger'] <= 85:
        telosl -= 2
    elif h['maxhunger'] <= 100:
        telosl -= 1
    elif h['maxhunger'] <= 120:
        telosl += 2
    elif h['maxhunger'] <= 150:
        telosl += 5
    elif h['maxhunger'] <= 200:
        telosl += 9

    if telosl <= -7:
        text += '—Ç–æ—â–µ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, '
    elif telosl <= -3:
        text += '—Å—Ç—Ä–æ–π–Ω–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, '
    elif telosl <= 5:
        text += '—Å—Ä–µ–¥–Ω–µ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, '
    elif telosl <= 10:
        text += '–ø–æ–ª–Ω–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, '
    elif telosl > 10:
        text += '–æ—á–µ–Ω—å –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, '

    text += ''
    if h['body']['height'] <= 165:
        text += '–Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–æ—Å—Ç–∞. '
    elif h['body']['height'] <= 180:
        text += '—Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞. '
    elif h['body']['height'] > 180:
        text += '–≤—ã—Å–æ–∫–æ–≥–æ —Ä–æ—Å—Ç–∞. '

    if h['gender'] == 'male':
        gn = '–Ω–µ–≥–æ'
    elif h['gender'] == 'female':
        gn = '–Ω–µ—ë'
    if h['body']['hair_lenght'] == 'short':
        text += '–£ ' + gn + ' –∫–æ—Ä–æ—Ç–∫–∏–µ, '
    elif h['body']['hair_lenght'] == 'medium':
        text += '–£ ' + gn + ' —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã '
    elif h['body']['hair_lenght'] == 'long':
        text += '–£ ' + gn + ' –¥–ª–∏–Ω–Ω—ã–µ, '

    if h['body']['hair_color'] == 'brown':
        text += '—Ä—É—Å—ã–µ –≤–æ–ª–æ—Å—ã.'
    if h['body']['hair_color'] == 'gold':
        text += '–∑–æ–ª–æ—Ç—ã–µ –≤–æ–ª–æ—Å—ã.'
    if h['body']['hair_color'] == 'orange':
        text += '—Ä—ã–∂–∏–µ –≤–æ–ª–æ—Å—ã.'
    if h['body']['hair_color'] == 'black':
        text += '—á—ë—Ä–Ω—ã–µ –≤–æ–ª–æ—Å—ã.'

    gnd = ' –û–Ω'
    gnd2 = '–∏–º'
    if h['gender'] == 'female':
        gnd = ' –û–Ω–∞'
        gnd2 = '–µ–π'
    if h['sleep'] / h['maxsleep'] <= 0.4:
        text += gnd + ' –≤—ã–≥–ª—è–¥–∏—Ç —É—Å—Ç–∞–≤—à' + gnd2 + '.'
    return text


def endwalk(user, newstr, start='street'):
    try:
        user = users.find_one({'id': user['id']})
        h = user['human']
        users.update_one({'id': user['id']}, {'$set': {'human.walking': False}})
        if len(user['human']['shop_inv']) > 0:
            bot.send_message(user['id'],
                             '–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –≤—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, –Ω–æ –≤–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –æ—Ö—Ä–∞–Ω–Ω–∏–∫. –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∫—É–ø–∫–∏!')
            return
        locs.update_one({'code': user['human']['position']['street']}, {'$pull': {'humans': user['id']}})
        users.update_one({'id': user['id']}, {'$set': {'human.position.street': newstr['code']}})
        if start == 'flat':
            kvs.update_one({'id': user['human']['position']['flat']}, {'$pull': {'humans': user['id']}})
            curflat = kvs.find_one({'id': h['position']['flat']})
            for ids in curflat['humans']:
                if ids != user['id']:
                    bot.send_message(ids, h['name'] + ' –ø–æ–∫–∏–¥–∞–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—É!')
        if start == 'building':
            b = user['human']['position']['building']
            h = user['human']
            locs.update_one({'code': user['human']['position']['street']},
                            {'$pull': {'buildings.' + b + '.humans': user['id']}})
            curstr = locs.find_one({'code': h['position']['street']})
            for ids in curstr['buildings'][b]['humans']:
                if ids != user['id']:
                    bot.send_message(ids, h['name'] + ' –ø–æ–∫–∏–¥–∞–µ—Ç –∑–¥–∞–Ω–∏–µ!')

        if start == 'street':
            h = user['human']
            curstr = locs.find_one({'code': h['position']['street']})
            for ids in curstr['humans']:
                if ids != user['id']:
                    user2 = users.find_one({'id': ids})
                    h2 = user2['human']
                    if h2['position']['flat'] == None and h2['position']['building'] == None:
                        bot.send_message(ids, h['name'] + ' –ø–æ–∫–∏–¥–∞–µ—Ç —É–ª–∏—Ü—É!')

        users.update_one({'id': user['id']}, {'$set': {'human.position.building': None, 'human.position.flat': None}})
        user = users.find_one({'id': user['id']})
        kb = reply_kb(user)
        if start == 'street':
            bot.send_message(user['id'], '–ì—É–ª—è—è –ø–æ –≥–æ—Ä–æ–¥—Å–∫–∏–º –ø–µ—Ä–µ—É–ª–∫–∞–º, –≤—ã –¥–æ—à–ª–∏ –¥–æ —É–ª–∏—Ü—ã ' + newstr['name'] + '!',
                             reply_markup=kb)
        elif start == 'flat' or start == 'building':
            bot.send_message(user['id'], '–í—ã –≤—ã—à–ª–∏ –Ω–∞ —É–ª–∏—Ü—É ' + newstr['name'] + '!', reply_markup=kb)
        locs.update_one({'code': newstr['code']}, {'$push': {'humans': user['id']}})

        street = locs.find_one({'code': newstr['code']})
        for ids in street['humans']:
            user2 = users.find_one({'id': ids})
            if user2['human']['position']['flat'] == None and user2['human']['position']['building'] == None:
                if int(ids) != user['id']:
                    bot.send_message(ids, '–ù–∞ —É–ª–∏—Ü–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è ' + desc(user))

        text = '–ù–∞ —É–ª–∏—Ü–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏—Ö –ª—é–¥–µ–π:\n\n'
        for ids in street['humans']:
            if ids != user['id']:
                user2 = users.find_one({'id': ids})
                if user2['human']['position']['flat'] == None and user2['human']['position']['building'] == None:
                    text += desc(users.find_one({'id': ids}), True) + '\n\n'

        if text != '–ù–∞ —É–ª–∏—Ü–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏—Ö –ª—é–¥–µ–π:\n\n':
            bot.send_message(user['id'], text)

    except:
        bot.send_message(441399484, traceback.format_exc())


@bot.message_handler(content_types=['text'])
def alltxts(m):
    if m.from_user.id == m.chat.id:
        user = getuser(m.from_user)
        if user['newbie']:
            users.update_one({'id': user['id']}, {'$set': {'newbie': False}})
            bot.send_message(m.chat.id,
                             '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –Ω–æ–≤—ã–π –∂–∏—Ç–µ–ª—å –≥–æ—Ä–æ–¥–∞ "–¢–µ–ª–µ–≥—Ä–∞–¥". –ù–µ –∑–Ω–∞—é, –∑–∞—á–µ–º –≤—ã —Å—é–¥–∞ –ø–æ–∂–∞–ª–æ–≤–∞–ª–∏, –Ω–æ —è –≤ —á—É–∂–∏–µ ' +
                             '–¥–µ–ª–∞ –Ω–µ –ª–µ–∑—É, –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è. –Ø - –ü–∞—Å—é–∫, –≥–∏–¥ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ. –ò –º–æ—è —Ä–æ–ª—å - –∑–∞—Å–µ–ª—è—Ç—å —Å—é–¥–∞ –Ω–æ–≤–æ–ø—Ä–∏–µ–∑–∂–∏—Ö, –≤–æ—Ç –∏ –≤—Å—ë (' +
                             '–ø–æ —Å–µ–∫—Ä–µ—Ç—É - –º–Ω–µ –∑–∞ —ç—Ç–æ –¥–∞–∂–µ –Ω–µ –ø–ª–∞—Ç—è—Ç, —Ö–æ—Ç—è —è —Å—Ç–æ—é —Ç—É—Ç 24/7 –∏ –≤—Å—Ç—Ä–µ—á–∞—é –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π. –î–µ–ª–∞—é —è —ç—Ç–æ –ø–æ –¥–æ–±—Ä–æ—Ç–µ –¥—É—à–µ–≤–Ω–æ–π ' +
                             '–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ –º–æ–≥—É). ' +
                             '–¢–∞–∫ —á—Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∏ —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –∏ —è –ø–æ–∫–∞–∂—É –≤–∞–º –≤–∞—à—É –Ω–æ–≤—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É.')

            kb = getstartkb(user)
            bot.send_message(m.chat.id,
                             '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë. –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–≥–¥–∞ –≤—ã –Ω–∞–∂–º—ë—Ç–µ "‚úÖ–ì–æ—Ç–æ–≤–æ", ' +
                             '–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å!', reply_markup=kb)
            return

        if user['human']['walking']:
            bot.send_message(m.chat.id, '–í—ã —Å–µ–π—á–∞—Å –≤ –ø—É—Ç–∏!')
            return

        if user['wait_for_stat'] != None and user['start_stats'] == True:
            what = user['wait_for_stat']
            allow = True
            er_text = ''
            if what == 'name':
                val = m.text.title()
                for ids in m.text:
                    if ids.lower() not in letters:
                        allow = False
                        er_text = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤!'
            elif what == 'gender':
                if m.text.lower() == '–ø–∞—Ä–µ–Ω—å':
                    val = 'male'
                if m.text.lower() == '–¥–µ–≤—É—à–∫–∞':
                    val = 'female'
                if m.text.lower() not in ['–ø–∞—Ä–µ–Ω—å', '–¥–µ–≤—É—à–∫–∞']:
                    allow = False
                    er_text = '–í–∞—à –ø–æ–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ `–ø–∞—Ä–µ–Ω—å`, –ª–∏–±–æ `–¥–µ–≤—É—à–∫–∞`!'
            elif what == 'age':
                try:
                    age = int(m.text)
                    val = age
                    if age < 18 or age > 25:
                        raise
                except:
                    allow = False
                    er_text = '–ù–∞—á–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 18 –¥–æ 25!'
            elif what == 'body.hair_color':
                if m.text.lower() == '—Ä—É—Å—ã–π':
                    val = 'brown'
                elif m.text.lower() == '–∑–æ–ª–æ—Ç–æ–π':
                    val = 'gold'
                elif m.text.lower() == '—Ä—ã–∂–∏–π':
                    val = 'orange'
                elif m.text.lower() == '—á—ë—Ä–Ω—ã–π':
                    val = 'black'
                if m.text.lower() not in ['—Ä—É—Å—ã–π', '–∑–æ–ª–æ—Ç–æ–π', '—Ä—ã–∂–∏–π', '—á—ë—Ä–Ω—ã–π']:
                    allow = False
                    er_text = '–¶–≤–µ—Ç –≤–æ–ª–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å `—Ä—É—Å—ã–π`, `–∑–æ–ª–æ—Ç–æ–π`, `—Ä—ã–∂–∏–π` –∏–ª–∏ `—á—ë—Ä–Ω—ã–π`!'
            elif what == 'body.hair_lenght':
                if m.text.lower() == '–∫–æ—Ä–æ—Ç–∫–∏–µ':
                    val = 'short'
                if m.text.lower() == '—Å—Ä–µ–¥–Ω–∏–µ':
                    val = 'medium'
                if m.text.lower() == '–¥–ª–∏–Ω–Ω—ã–µ':
                    val = 'long'
                if m.text.lower() not in ['–∫–æ—Ä–æ—Ç–∫–∏–µ', '—Å—Ä–µ–¥–Ω–∏–µ', '–¥–ª–∏–Ω–Ω—ã–µ']:
                    allow = False
                    er_text = '–î–ª–∏–Ω–∞ –≤–æ–ª–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å: `–∫–æ—Ä–æ—Ç–∫–∏–µ`, `—Å—Ä–µ–¥–Ω–∏–µ`, `–¥–ª–∏–Ω–Ω—ã–µ`!'


            elif what == 'body.height':
                try:
                    height = int(m.text)
                    val = height
                    if height < 140 or height > 200:
                        raise
                except:
                    allow = False
                    er_text = '–†–æ—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 140 –¥–æ 200 —Å–º!'

            if allow:
                users.update_one({'id': user['id']}, {'$set': {'human.' + what: val, 'wait_for_stat': None}})
                user = getuser(m.from_user)

            if allow == False:
                bot.send_message(m.chat.id, er_text, parse_mode='markdown')
                kb = getstartkb(user)
                bot.send_message(m.chat.id,
                                 '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë. –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–≥–¥–∞ –≤—ã –Ω–∞–∂–º—ë—Ç–µ "‚úÖ–ì–æ—Ç–æ–≤–æ", ' +
                                 '–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å!', reply_markup=kb)
            else:
                bot.send_message(m.chat.id, '–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ "' + str(val) + '"!')
                kb = getstartkb(user)
                bot.send_message(m.chat.id,
                                 '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë. –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–≥–¥–∞ –≤—ã –Ω–∞–∂–º—ë—Ç–µ "‚úÖ–ì–æ—Ç–æ–≤–æ", ' +
                                 '–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å!', reply_markup=kb)

        if user['start_stats'] == True:
            return

        if user['human']['position']['street'] != None and user['human']['position']['flat'] == None and \
                user['human']['position']['building'] == None:
            street = locs.find_one({'code': user['human']['position']['street']})
            for hh in street['humans']:
                h = users.find_one({'id': hh})['human']
                if h['position']['flat'] == None and h['position']['building'] == None:
                    bot.send_message(hh, user['human']['name'] + ': ' + m.text)

        elif user['human']['position']['flat'] != None:
            kv = kvs.find_one({'id': user['human']['position']['flat']})
            for h in kv['humans']:
                bot.send_message(h, user['human']['name'] + ': ' + m.text)

        elif user['human']['position']['building'] != None:
            build = None
            street = locs.find_one({'code': user['human']['position']['street']})
            for ids in street['buildings']:
                if street['buildings'][ids]['code'] == user['human']['position']['building']:
                    build = street['buildings'][ids]
            for h in build['humans']:
                bot.send_message(h, user['human']['name'] + ': ' + m.text)


def getstartkb(user):
    h = user['human']
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text='–ò–º—è: ' + str(h['name']), callback_data='change?name'))
    kb.add(types.InlineKeyboardButton(text='–ü–æ–ª: ' + to_text(h['gender'], 'gender').lower(),
                                      callback_data='change?gender'))
    kb.add(types.InlineKeyboardButton(text='–í–æ–∑—Ä–∞—Å—Ç: ' + str(h['age']), callback_data='change?age'))
    kb.add(types.InlineKeyboardButton(text='–ù–∞–ª–∏—á–Ω—ã–µ: ' + str(h['money']), callback_data='change?not'))
    kb.add(types.InlineKeyboardButton(text='–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ' + to_text(h['education'], 'education').lower(),
                                      callback_data='change?not'))
    kb.add(types.InlineKeyboardButton(text='–¶–≤–µ—Ç –≤–æ–ª–æ—Å: ' + to_text(h['body']['hair_color'], 'hair_color').lower(),
                                      callback_data='change?body.hair_color'))
    kb.add(types.InlineKeyboardButton(text='–î–ª–∏–Ω–∞ –≤–æ–ª–æ—Å: ' + to_text(h['body']['hair_lenght'], 'hair_lenght').lower(),
                                      callback_data='change?body.hair_lenght'))
    kb.add(
        types.InlineKeyboardButton(text='–†–æ—Å—Ç: ' + str(h['body']['height']) + '—Å–º', callback_data='change?body.height'))
    kb.add(types.InlineKeyboardButton(text='‚úÖ–ì–æ—Ç–æ–≤–æ', callback_data='change?ready'))
    return kb


@bot.callback_query_handler(func=lambda call: call.data.split('?')[0] == 'shop')
def shopping1(call):
    user = users.find_one({'id': call.from_user.id})
    if user == None:
        return
    h = user['human']
    act = call.data.split('?')[1]
    if act == 'buy':
        what = call.data.split('?')[2]
        if h['position']['building'] == None:
            medit('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!', call.message.chat.id, call.message.message_id)
            return
        shop = currentshop(h)
        if shop == None:
            medit('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!', call.message.chat.id, call.message.message_id)
            return
        pr = what
        if pr not in shop['products']:
            medit('–¢–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç!', call.message.chat.id, call.message.message_id)
            return
        weight = 0
        for ids in h['inv']:
            weight += getweight(ids, 'product')
        for ids in h['shop_inv']:
            weight += getweight(ids, 'product')
        weight += getweight(pr)
        if weight > (h['inv_maxweight'] + h['strenght']):
            bot.answer_callback_query(call.id, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–µ—Å—Ç–∏ —Ç–∞–∫–æ–π –≤–µ—Å!', show_alert=True)
            return
        prod = init_product(pr, 0)
        users.update_one({'id': user['id']}, {'$push': {'human.shop_inv': pr}})
        bot.answer_callback_query(call.id, '–í—ã –ø–æ–ª–æ–∂–∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ —Ç–µ–ª–µ–≥—É –¥–ª—è –ø–æ–∫—É–ø–æ–∫.', show_alert=True)

    elif act == 'mainmenu':
        shop = currentshop(h)
        if shop == None:
            medit('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!', call.message.chat.id, call.message.message_id)
            return
        kb = getshop(shop, user)
        medit('–ù–∞ –ø–æ–ª–∫–∞—Ö –º–∞–≥–∞–∑–∏–Ω–∞ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç:', call.message.chat.id, call.message.message_id,
              reply_markup=kb)

    elif act == 'my_buys':
        shop = currentshop(h)
        if shop == None:
            medit('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!', call.message.chat.id, call.message.message_id)
            return
        kb = getbuylist(h)
        medit('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ —Ç–µ–ª–µ–≥–∏.', call.message.chat.id, call.message.message_id,
              reply_markup=kb)

    elif act == 'remove':
        shop = currentshop(h)
        if shop == None:
            medit('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!', call.message.chat.id, call.message.message_id)
            return
        pr = call.data.split('?')[2]
        if pr not in h['shop_inv']:
            bot.answer_callback_query(call.id, '–£ –≤–∞—Å –≤ —Ç–µ–ª–µ–≥–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞!', show_alert=True)
            return
        newlist = h['shop_inv']
        newlist.remove(pr)
        users.update_one({'id': user['id']}, {'$set': {'human.shop_inv': newlist}})
        bot.answer_callback_query(call.id, '–í—ã —É–±—Ä–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Ç–µ–ª–µ–≥–∏ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø–æ–ª–∫—É.')
        kb = getbuylist(h)
        medit('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ —Ç–µ–ª–µ–≥–∏.', call.message.chat.id, call.message.message_id,
              reply_markup=kb)


    elif act == 'buy_ready':
        cost = 0
        shop = currentshop(h)
        if shop == None:
            medit('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!', call.message.chat.id, call.message.message_id)
            return
        for ids in user['human']['shop_inv']:
            cost += shop['products'][ids]['cost']
        if cost > h['money']:
            bot.answer_callback_query(call.id,
                                      '–ö–∞—Å—Å–∏—Ä: —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ (—Å—É–º–º–∞ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫ - ' + str(cost) + 'üí∂)!',
                                      show_alert=True)
            return
        users.update_one({'id': user['id']}, {'$push': {'human.inv': {'$each': h['shop_inv']}}})
        users.update_one({'id': user['id']}, {'$set': {'human.shop_inv': []}})
        users.update_one({'id': user['id']}, {'$inc': {'human.money': -cost}})
        medit('–ö–∞—Å—Å–∏—Ä: —Å –≤–∞—Å ' + str(cost) + 'üí∂. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â—ë!', call.message.chat.id,
              call.message.message_id)


def getbuylist(h):
    kb = types.InlineKeyboardMarkup()
    for ids in h['shop_inv']:
        kb.add(types.InlineKeyboardButton(text=init_product(ids, 0)['name'], callback_data='shop?remove?' + ids))
    kb.add(types.InlineKeyboardButton(text='‚Ü©–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–ª–∫–∞–º', callback_data='shop?mainmenu'))
    return kb


@bot.callback_query_handler(func=lambda call: call.data.split('?')[0] == 'show')
def shopping(call):
    try:
        user = users.find_one({'id': call.from_user.id})
        if user == None:
            return
        h = user['human']
        if h['position']['building'] == None:
            medit('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!', call.message.chat.id, call.message.message_id)
            return
        shop = None
        for ids in streets[h['position']['street']]['buildings']:
            if streets[h['position']['street']]['buildings'][ids]['code'] == h['position']['building']:
                shop = streets[h['position']['street']]['buildings'][ids]
        if shop == None:
            medit('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!', call.message.chat.id, call.message.message_id)
            return
        pr = call.data.split('?')[1]
        if pr not in shop['products']:
            medit('–¢–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç!', call.message.chat.id, call.message.message_id)
            return
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', callback_data='shop?buy?' + pr))
        kb.add(types.InlineKeyboardButton(text='‚Ü©–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–ª–∫–∞–º', callback_data='shop?mainmenu'))
        medit(init_product(pr, 0, True) + '\n–¶–µ–Ω–∞: ' + str(shop['products'][pr]['cost']) + 'üí∂', call.message.chat.id,
              call.message.message_id, reply_markup=kb)
    except:
        print(traceback.format_exc())


@bot.callback_query_handler(func=lambda call: call.data.split('?')[0] == 'change')
def changestats(call):
    user = users.find_one({'id': call.from_user.id})
    if user == None:
        return
    if user['start_stats'] == False:
        return
    what = call.data.split('?')[1]
    if what == 'not':
        bot.answer_callback_query(call.id, '–≠—Ç—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è!', show_alert=True)
        return
    users.update_one({'id': user['id']}, {'$set': {'wait_for_stat': what}})
    text = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
    if what == 'name':
        text = '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤–∞—à–µ –∏–º—è.'
    elif what == 'gender':
        text = '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤–∞—à –ø–æ–ª (–º–æ–∂–µ—Ç –±—ã—Ç—å `–ø–∞—Ä–µ–Ω—å` –∏–ª–∏ `–¥–µ–≤—É—à–∫–∞`).'
    elif what == 'age':
        text = '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 25).'
    elif what == 'body.hair_color':
        text = '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ü–≤–µ—Ç –≤–∞—à–∏—Ö –≤–æ–ª–æ—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å: `—Ä—É—Å—ã–π`, `–∑–æ–ª–æ—Ç–æ–π`, `—Ä—ã–∂–∏–π`, `—á—ë—Ä–Ω—ã–π`).'
    elif what == 'body.hair_lenght':
        text = '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –¥–ª–∏–Ω—É –≤–∞—à–∏—Ö –≤–æ–ª–æ—Å (–º–æ–≥—É—Ç –±—ã—Ç—å: `–∫–æ—Ä–æ—Ç–∫–∏–µ`, `—Å—Ä–µ–¥–Ω–∏–µ`, `–¥–ª–∏–Ω–Ω—ã–µ`).'
    elif what == 'body.height':
        text = '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤–∞—à —Ä–æ—Å—Ç (–æ—Ç 150 –¥–æ 190).'

    elif what == 'ready':
        h = user['human']
        if h['name'] == None:
            bot.answer_callback_query(call.id, '–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º!', show_alert=True)
            return
        else:
            kb = reply_kb(user)
            medit('–•–æ—Ä–æ—à–æ! –Ø –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª, ' + h['name'] + '. –í–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª–∏—Ü–∞ ' +
                  streets[h['street']]['name'] + ', –¥–æ–º ' + h[
                      'home'] + '. –ù–∞–¥–µ—é—Å—å, —Å–∞–º–∏ –¥–æ–±–µ—Ä—ë—Ç–µ—Å—å. –°–µ–π—á–∞—Å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —É–ª–∏—Ü–µ –í—Å—Ç—Ä–µ—á–Ω–∞—è! ' +
                  '–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–∞–∫–æ–µ-—Ç–æ –º–µ—Å—Ç–æ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–æ–º (/navigator) –Ω–∞ —Å–≤–æ—ë–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –£—Å–ø–µ—Ö–æ–≤!',
                  call.message.chat.id, call.message.message_id)

            users.update_one({'id': user['id']}, {'$set': {'start_stats': False}})
            users.update_one({'id': user['id']}, {'$set': {'wait_for_stat': False}})

            time.sleep(2)
            bot.send_message(call.message.chat.id,
                             '–ß—É—Ç—å –Ω–µ –∑–∞–±—ã–ª! –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ (/help). –Ø —Å–∞–º –µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª!',
                             reply_markup=kb)
            return
    medit(text, call.message.chat.id, call.message.message_id, parse_mode='markdown')


def to_text(x, param):
    ans = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ (–Ω–∞–ø–∏—à–∏—Ç–µ @Loshadkin)'
    if param == 'gender':
        if x == 'male':
            ans = '–ü–∞—Ä–µ–Ω—å'
        elif x == 'female':
            ans = '–î–µ–≤—É—à–∫–∞'

    elif param == 'education':
        if x == 'basic':
            ans = '–û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (11 –∫–ª–∞—Å—Å–æ–≤)'

    elif param == 'hair_color':
        if x == 'brown':
            ans = '–†—É—Å—ã–µ'
        elif x == 'gold':
            ans = '–ó–æ–ª–æ—Ç—ã–µ'
        elif x == 'orange':
            ans = '–†—ã–∂–∏–µ'
        elif x == 'black':
            ans = '–ß—ë—Ä–Ω—ã–µ'

    elif param == 'hair_lenght':
        if x == 'short':
            ans = '–ö–æ—Ä–æ—Ç–∫–∏–µ'
        elif x == 'medium':
            ans = '–°—Ä–µ–¥–Ω–∏–µ'
        elif x == 'long':
            ans = '–î–ª–∏–Ω–Ω—ã–µ'

    elif param == 'place':
        place = x.split('?')[0]
        code = x.split('?')[1]
        if place == 'street':
            if code in ['bitard_street', 'meet_street', 'new_street', 'shop_street']:
                ans = '–£–ª–∏—Ü–∞ ' + streets[code]['name']
        if place == 'building':
            build = None
            if code in ['sitniy']:
                txt = '–ú–∞–≥–∞–∑–∏–Ω'
                for ids in streets:
                    if code in streets[ids]['buildings']:
                        build = streets[ids]['buildings'][code]
            if build == None:
                return '?'
            ans = txt + ' ' + build['name']
        if place == 'home':
            ans = '–ö–≤–∞—Ä—Ç–∏—Ä–∞ ' + str(code)
    return ans


def human(user):
    allstrs = []
    for ids in streets:
        if len(streets[ids]['homes']) > 0:
            allstrs.append(streets[ids])
    street = random.choice(allstrs)
    home = random.choice(street['homes'])
    key = street['code'] + '#' + home + '#' + str(user.id)
    return {
        'name': None,
        'gender': random.choice(['male', 'female']),
        'age': random.randint(18, 25),
        'money': random.randint(2000, 2500),
        'street': street['code'],
        'home': home,
        'keys': [key],
        'position': {
            'street': 'meet_street',
            'flat': None,
            'building': None
        },
        'hunger': 100,
        'maxhunger': 100,
        'health': 100,
        'maxhealth': 100,
        'strenght': random.randint(3, 3),
        'intelligence': random.randint(3, 3),
        'power': 40,
        'maxpower': 100,
        'sleep': 100,
        'maxsleep': 100,
        'education': 'basic',
        'mix': [],
        'take_away': False,
        'walking': False,
        'inv': [],
        'inv_maxweight': 50,
        'shop_inv': [],
        'kl': True,
        'br': False,
        'body': {
            'hair_color': random.choice(h_colors),
            'hair_lenght': random.choice(h_lenghts),
            'height': random.randint(150, 190)
        }

    }


def createuser(user):
    return {
        'id': user.id,
        'name': user.first_name,
        'username': user.username,
        'human': human(user),
        'newbie': True,
        'start_stats': True,
        'wait_for_stat': None
    }


def createkv(user, hom, street):
    return {
        'id': user.id,
        'name': user.first_name,
        'home': hom,
        'street': street,
        'locked': True,
        'objects': {
            'fridge': {
                'maxweight': 500,
                'inv': [],
                'money_hour': 1,
                'type': 'fridge',
                'code': 'fridge'
            }
        },
        'humans': []
    }


def getuser(u):
    user = users.find_one({'id': u.id})
    if user == None:
        users.insert_one(createuser(u))
        user = users.find_one({'id': u.id})
        hom = user['human']['home']
        street = user['human']['street']
        kvs.insert_one(createkv(u, hom, street))
    return user


def medit(message_text, chat_id, message_id, reply_markup=None, parse_mode=None):
    return bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=message_text, reply_markup=reply_markup,
                                 parse_mode=parse_mode)
